using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace Lab2
{
	public partial class Form1 : Form
	{
		public int wCount = 0; //number of created child windows
		public int lineWidth = 1;   //current pen width
		public int pictHeight=600,pictWidth=800; //new window parameters
		public bool solidFill = false;
		public int figureID = 0;

		public void newWindow()
		{
			Form2 f2 = new Form2(); //create new window
			f2.MdiParent = this;
			//применять исходные параметры рисования
			f2.lineWidth = lineWidth;
			f2.primaryColor = primColorDialog.Color;
			f2.secondaryColor = secondColorDialog.Color;
			f2.backColor = backColorDialog.Color;
			f2.solidFill = solidFill;
			f2.figureID = figureID;
			//параметры формы
			f2.pictHeight = pictHeight;
			f2.pictWidth = pictWidth;
			f2.AutoScrollMinSize = new Size(pictWidth,pictHeight);
			f2.AutoScroll = true;
			f2.Text = "Рисунок "+(++wCount);
			f2.Show();
		}

		//INTERFACE
		//======================================================================================

		public void activateMenu()
		{
			saveToolStripMenuItem.Enabled = true;   //Enabled-включено
			saveAsToolStripMenuItem.Enabled = true;
			toolStripButton3.Enabled = true;
		}

		public void deactivateMenu()
		{
			saveToolStripMenuItem.Enabled = false;
			saveAsToolStripMenuItem.Enabled = false;
			toolStripButton3.Enabled = false;
		}

		public void setWindowSizeCaption(int w,int h)
		{
			if(w>=0 && h>=0)
				statusBarPanel4.Text = "Размер рисунка:("+w+","+h+")";
			else
				statusBarPanel4.Text = "";
		}
        //размер окна //строка состояния
		public void setMousePositionCaption(int x,int y)
		{
			if(x>=0 && y>=0)
				statusBarPanel5.Text = x+","+y;
			else
				statusBarPanel5.Text = "";
		}//мышь

		//FILE I/O
		//======================================================================================

		public void openFile()
		{
			if(openFileDialog1.ShowDialog()==DialogResult.OK)
			{
				newWindow(); //create new window
				((Form2)this.ActiveMdiChild).LoadFile(openFileDialog1.FileName);
				((Form2)this.ActiveMdiChild).fromFile = true;
				((Form2)this.ActiveMdiChild).fileName = openFileDialog1.FileName;
				this.ActiveMdiChild.Text = openFileDialog1.FileName; //задать текст заголовка окна
			}
			activateMenu();
		}

		public void saveAsFile()
		{
			saveFileDialog1.InitialDirectory = Environment.CurrentDirectory;
			if(saveFileDialog1.ShowDialog()==DialogResult.OK)
			{
				((Form2)this.ActiveMdiChild).SaveFile(saveFileDialog1.FileName);
				((Form2)this.ActiveMdiChild).fileName = saveFileDialog1.FileName;
				((Form2)this.ActiveMdiChild).fromFile = true;
				this.ActiveMdiChild.Text = saveFileDialog1.FileName; //установить текст
			}
		}

		public void saveFile()
		{
			if(((Form2)this.ActiveMdiChild).fromFile)
				((Form2)this.ActiveMdiChild).SaveFile(((Form2)this.ActiveMdiChild).fileName); //сохранить существующий файл
			else
				saveAsFile(); //сохранить новый файл
		}

		//Настройки изображения
		//======================================================================================
		
		public void setPenWidth()
		{
			penWidthDialog pwd = new penWidthDialog();
			pwd.Val = lineWidth; //установить старую ширину пера
			if(pwd.ShowDialog()==DialogResult.OK)
			{
				foreach(Form f2 in this.MdiChildren) 
					((Form2)f2).lineWidth = pwd.Val; //распространяются на всех детей окна
				lineWidth = pwd.Val;
				statusBarPanel1.Text = "Толщина линий:"+lineWidth;
			}
		}
		
		public void setPictureSize()
		{
			pictureSizeDialog psd = new pictureSizeDialog();
			if(psd.ShowDialog()==DialogResult.OK)
			{
				pictHeight = psd.newHeight;
				pictWidth = psd.newWidth;
			}
		}
		
		public void setPrimaryColor()
		{
			if(primColorDialog.ShowDialog()==DialogResult.OK)
			{
				foreach(Form f2 in this.MdiChildren)
					((Form2)f2).primaryColor = primColorDialog.Color;
				statusBar1.Refresh();
			}

		}

		public void setSecondaryColor()
		{
			if(secondColorDialog.ShowDialog()==DialogResult.OK)
			{
				foreach(Form f2 in this.MdiChildren)
					((Form2)f2).secondaryColor = secondColorDialog.Color;
				statusBar1.Refresh();
			}
		}

		//FUGURE SELECTION/FILL Пересчет данных ВЫБОР / заливка
		//======================================================================================

		public void allDown()
		{ //set all figure type controls "checked" to false//установить все фигуры типа управления "проверили" на ложный
			lieToolStripMenuItem.Checked = false;
			rectangleToolStripMenuItem.Checked = false;
			ellipseToolStripMenuItem.Checked = false;
			curveToolStripMenuItem.Checked = false;
			toolStripButton8.Checked = false;
			toolStripButton9.Checked = false;
			toolStripButton10.Checked = false;
			toolStripButton11.Checked = false;
		}

		public void setFigureType()
		{
			foreach(Form f2 in this.MdiChildren) //применять фигуры типа все активные окна
				((Form2)f2).figureID = figureID;
		}

		public void setFill() //заливка
		{
			if(!fillToolStripMenuItem.Checked)
			{
				solidFill = true;
				fillToolStripMenuItem.Checked = true;
				toolStripButton12.Checked = true;
			}else{
				solidFill = false;
				fillToolStripMenuItem.Checked = false;
				toolStripButton12.Checked = false;
			}
			foreach(Form f2 in this.MdiChildren)
				((Form2)f2).solidFill = solidFill;
				
		}

		public void setLine()
		{
			allDown();
			lieToolStripMenuItem.Checked = true;
			toolStripButton8.Checked = true;
			figureID = 0;
			setFigureType();
		}

		public void setCurve()
		{
			allDown();
			curveToolStripMenuItem.Checked = true;
			toolStripButton9.Checked = true;
			figureID = 1;
			setFigureType();
		}

		public void setRectangle()
		{
			allDown();
			rectangleToolStripMenuItem.Checked = true;
			toolStripButton10.Checked = true;
			figureID = 2;
			setFigureType();
		}

		public void setEllipse()
		{
			allDown();
			ellipseToolStripMenuItem.Checked = true;
			toolStripButton11.Checked = true;
			figureID = 3;
			setFigureType();
		}

		//======================================================================================

		public Form1()
		{
			InitializeComponent();
		}

		private void newToolStripMenuItem1_Click(object sender, EventArgs e)
		{
			newWindow();
			activateMenu();
		}

		private void oPenToolStripMenuItem_Click(object sender, EventArgs e)
		{
			openFile();
		}

		private void saveToolStripMenuItem_Click(object sender, EventArgs e)
		{
			saveFile();
		}

		private void saveAsToolStripMenuItem_Click(object sender, EventArgs e)
		{
			saveAsFile();
		}

		private void lineWidthToolStripMenuItem_Click(object sender, EventArgs e)
		{
			setPenWidth();
		}

		private void backgroundColorToolStripMenuItem_Click(object sender, EventArgs e)
		{
			setSecondaryColor();
		}

		private void lineColorToolStripMenuItem_Click(object sender, EventArgs e)
		{
			setPrimaryColor();
		}

		private void newPicturesSizeToolStripMenuItem_Click(object sender, EventArgs e)
		{
			setPictureSize();
		}

		private void fillToolStripMenuItem_Click(object sender, EventArgs e)
		{
			setFill();
		}

		private void lieToolStripMenuItem_Click(object sender, EventArgs e)
		{
			setLine();
		}

		private void curveToolStripMenuItem_Click(object sender, EventArgs e)
		{
			setCurve();
		}

		private void rectangleToolStripMenuItem_Click(object sender, EventArgs e)
		{
			setRectangle();
		}

		private void ellipseToolStripMenuItem_Click(object sender, EventArgs e)
		{
			setEllipse();
		}

		private void statusBar1_DrawItem(object sender, StatusBarDrawItemEventArgs sbdevent)
		{
			Graphics g = statusBar1.CreateGraphics();
			g.FillRectangle(new SolidBrush(primColorDialog.Color),100,2,sbdevent.Panel.Width,statusBar1.Height);
			g.FillRectangle(new SolidBrush(secondColorDialog.Color),150,2,sbdevent.Panel.Width,statusBar1.Height);
			g.Dispose();
		}

		private void toolStripButton1_Click(object sender, EventArgs e)
		{
			newWindow();
			activateMenu();
		}

		private void toolStripButton2_Click(object sender, EventArgs e)
		{
			openFile();
		}

		private void toolStripButton3_Click(object sender, EventArgs e)
		{
			saveFile();
		}

		private void toolStripButton4_Click(object sender, EventArgs e)
		{
			setPenWidth();
		}

		private void toolStripButton5_Click(object sender, EventArgs e)
		{
			setPrimaryColor();
		}

		private void toolStripButton6_Click(object sender, EventArgs e)
		{
			setSecondaryColor();
		}

		private void toolStripButton7_Click(object sender, EventArgs e)
		{
			setPictureSize();
		}

		private void toolStripButton12_Click(object sender, EventArgs e)
		{
			setFill();
		}

		private void toolStripButton8_Click(object sender, EventArgs e)
		{
			setLine();
		}

		private void toolStripButton9_Click(object sender, EventArgs e)
		{
			setCurve();
		}

		private void toolStripButton10_Click(object sender, EventArgs e)
		{
			setRectangle();
		}

		private void toolStripButton11_Click(object sender, EventArgs e)
		{
			setEllipse();
		}

	}
}















form2
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.IO;

namespace Lab2
{
	public partial class Form2 : Form
	{
		//ПЕРЕМЕННЫЕ
		//======================================================================================

		public string fileName; //имя файла где картина сохраняется
		public bool fromFile = false;
		bool paintAction = false;
		bool changedCanvas = false; 
		Point start,finish;
		List<AbstractFigure> fstorage = new List<AbstractFigure>();
		AbstractFigure toPaint;
		//покраска вещей
		Bitmap canvas = new Bitmap(10,10);
		public Color backColor = Color.Aquamarine;		//Цвет фона
		public Color frameColor = Color.Black;		//Цвет временная фигура
		public Color primaryColor = Color.Black;    //lines color
		public Color secondaryColor = Color.Black;    //fill color
		public int lineWidth = 2;
		public bool solidFill = false;
		public int figureID = 0; //line is default
		public int pictWidth=1,pictHeight=1;

		//DRAWING
		//======================================================================================
	
		public void drawCanvas()
		{
			canvas.Dispose();						   //уничтожить старые растровые ...
			canvas = new Bitmap(pictWidth,pictHeight); //... и создать новые
			Graphics g = Graphics.FromImage(canvas);
			g.Clear(backColor);
			foreach(AbstractFigure go in fstorage)
				go.draw(ref g);
			if(paintAction)
				toPaint.drawFrame(ref g); //сделать временную фигуру
			g.Dispose();
		}

		private void initPainter()
		{   //установить тип объекта для рисования
			switch(figureID)
			{
				case 0:	toPaint = new GLine(); break;
				case 1: toPaint = new GCurve(); break;
				case 2: toPaint = new GRectangle(); break;
				case 3: toPaint = new GEllipse(); break;
				default: toPaint = new GLine(); break; //если цифра неизвестна - установить в качестве линии
			}
			//задать свойства новой фигуры
			toPaint.loadColors(primaryColor,secondaryColor,frameColor);
			toPaint.firstPoint = start;
			toPaint.secondPoint = start;
			toPaint.lineWidth = lineWidth;
			toPaint.fill = solidFill;
		}

		//I/O
		//======================================================================================

		public void SaveFile(string name)
		{
			BinaryFormatter formatter = new BinaryFormatter();
			Stream stream = new FileStream(name,FileMode.Create,FileAccess.Write,FileShare.None);
			formatter.Serialize(stream,pictWidth);
			formatter.Serialize(stream,pictHeight);
			formatter.Serialize(stream,backColor); //сохранить цвет фона
			formatter.Serialize(stream,fstorage);  //save figure storage
			stream.Close();
			changedCanvas = false;
		}

		public void LoadFile(string name)
		{
			BinaryFormatter formatter = new BinaryFormatter();
			Stream stream = new FileStream(name, FileMode.Open, FileAccess.Read, FileShare.Read);
			pictWidth = (int)formatter.Deserialize(stream);
			pictHeight = (int)formatter.Deserialize(stream);
			backColor = (Color)formatter.Deserialize(stream);
			fstorage = (List<AbstractFigure>)formatter.Deserialize(stream);
			stream.Close();
			//перекрасить
			drawCanvas();
			Refresh();
		}

		//ФОРМА ВНЕШНИЙ ВИД
		//======================================================================================

		public Form2()
		{
			InitializeComponent();
		}

		private void Form2_Shown(object sender, EventArgs e)
		{
			canvas = new Bitmap(pictWidth,pictHeight);
			Graphics.FromImage(canvas).Clear(backColor);
		}

		private void Form2_Activated(object sender, EventArgs e)
		{
			((Form1)this.ParentForm).setWindowSizeCaption(pictWidth,pictHeight);
		}

		//MOUSE EVENTS
		//======================================================================================

		private void Form2_MouseDown(object sender, MouseEventArgs e)
		{ //start painting
			int eX = e.X - AutoScrollPosition.X;
			int eY = e.Y - AutoScrollPosition.Y;
			if(e.Button==MouseButtons.Left && eX<=pictWidth && eY<=pictHeight)
			{
				start.X = eX;
				start.Y = eY;
				finish = start;
				initPainter();
				paintAction = true;
			}
		}

		private void Form2_MouseMove(object sender, MouseEventArgs e)
		{ //painting
			int eX = e.X - AutoScrollPosition.X;
			int eY = e.Y - AutoScrollPosition.Y;
			if(paintAction)
			{
				finish.X = eX;
				finish.Y = eY;
				toPaint.secondPoint = finish; //хранить текущий момент покрытие
				drawCanvas(); //краской холст
				Refresh();
			}
			((Form1)this.ParentForm).setMousePositionCaption(eX,eY);
		}

		private void Form2_MouseUp(object sender, MouseEventArgs e)
		{ //paint is finished
			int eX = e.X - AutoScrollPosition.X;
			int eY = e.Y - AutoScrollPosition.Y;
			if(paintAction)
			{
				paintAction = false;
				finish.X = eX;	
				finish.Y = eY;
				toPaint.secondPoint = finish;
				changedCanvas = true; //somethig was painted
				if(eX<=pictWidth && eY<=pictHeight && eX>=0 && eY>=0) //проверить - новая фигура должна быть внутри полотна
					fstorage.Add(toPaint); //добавить новый показатель для хранения
				drawCanvas(); //перекрасить
				Refresh();
			}
		}

		private void Form2_MouseLeave(object sender, EventArgs e)
		{
			((Form1)this.ParentForm).setMousePositionCaption(-1,-1);
		}

		//ФОРМА Перекраска
		//======================================================================================

		private void Form2_Paint(object sender, PaintEventArgs e)
		{
			e.Graphics.Clear(Color.LightGray);
			e.Graphics.DrawImage(canvas,AutoScrollPosition.X,AutoScrollPosition.Y); //просто рисовать образ
		}

		private void Form2_Resize(object sender, EventArgs e)
		{
			drawCanvas();
			Refresh();
		}

		//ЗАКРЫТие ДЕЙСТВИЙ
		//======================================================================================

		private void Form2_FormClosed(object sender, FormClosedEventArgs e)
		{
			if(this.ParentForm.MdiChildren.Length==1)
			{
				((Form1)this.ParentForm).deactivateMenu(); //последнее дочернее окно было закрыто
				((Form1)this.ParentForm).setMousePositionCaption(-1,-1);
				((Form1)this.ParentForm).setWindowSizeCaption(-1,-1);
			}
		}

		private void Form2_FormClosing(object sender, FormClosingEventArgs e)
		{
			if(changedCanvas) //спрашивать только, если что-то изменилось
				switch(MessageBox.Show("Сохранить изменения в \""+this.Text+"\"?","Вопрос",MessageBoxButtons.YesNoCancel))
				{
					case DialogResult.Yes:
						((Form1)this.ParentForm).saveFile();
					break;
					case DialogResult.Cancel:
						e.Cancel = true;
					break;
				}
				//NO в противном случае
		}

		//======================================================================================
	}

	//CLASSES
	//======================================================================================

	[Serializable()]
	public abstract class AbstractFigure //Базовый класс всех фигур
	{
		//Properties
		public virtual Point firstPoint{
			set{ p1 = value;}
			get{ return p1; }
		}
		public virtual Point secondPoint{
			set{ p2 = value;}
			get{ return p2; }
		}
		public int lineWidth{
			set{
				if(value<=0)
					lWidth = 1;
				else
					lWidth = value;
			}
			get{ return lWidth; }
		}
		//поля
		protected Point p1,p2; //position
		protected int lWidth; //drawing line width
		protected Color primaryColor,secondaryColor,frameColor;
		public bool fill;
		//Methods
		public void loadColors(Color pc,Color sc,Color fc)
		{
			primaryColor = pc;
			secondaryColor = sc;
			frameColor = fc;
		}
		public abstract void draw(ref Graphics g);
		public abstract void drawFrame(ref Graphics g);
	}

	[Serializable()]
	public class GRectangle: AbstractFigure //прямоугольник
	{
		[NonSerialized()] int x,y,w,h;
		void transform()
		{
			if(p2.X>p1.X) //for X
			{
				x = p1.X;
				w = p2.X-p1.X;
			}else{
				x = p2.X;
				w = p1.X-p2.X;
			}
			if(p2.Y>p1.Y) //for Y
			{
				y = p1.Y;
				h = p2.Y-p1.Y;
			}else{
				y = p2.Y;
				h = p1.Y-p2.Y;
			}
		}
		public override void drawFrame(ref Graphics g)
		{
			Pen p = new Pen(frameColor);
			p.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
			transform();
			g.DrawRectangle(p,x,y,w,h);
			p.Dispose();
		}
		public override void draw(ref Graphics g)
		{
			Pen p = new Pen(primaryColor,lWidth);
			transform();
			if(fill)
				g.FillRectangle(new SolidBrush(secondaryColor),x,y,w,h);
			g.DrawRectangle(p,x,y,w,h);
			p.Dispose();
		}
	}

	[Serializable()]
	public class GEllipse: AbstractFigure //ellipse
	{
		[NonSerialized()] int x,y,w,h;
		void transform()
		{
			if(p2.X>p1.X) //for X
			{
				x = p1.X;
				w = p2.X-p1.X;
			}else{
				x = p2.X;
				w = p1.X-p2.X;
			}
			if(p2.Y>p1.Y) //for Y
			{
				y = p1.Y;
				h = p2.Y-p1.Y;
			}else{
				y = p2.Y;
				h = p1.Y-p2.Y;
			}
		}
		public override void drawFrame(ref Graphics g)
		{
			Pen p = new Pen(frameColor);
			p.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
			transform();
			g.DrawEllipse(p,x,y,w,h);
			p.Dispose();
		}
		public override void draw(ref Graphics g)
		{
			Pen p = new Pen(primaryColor,lWidth);
			transform();
			if(fill)
				g.FillEllipse(new SolidBrush(secondaryColor),x,y,w,h);
			g.DrawEllipse(p,x,y,w,h);
			p.Dispose();
		}
	}

	[Serializable()]
	public class GLine: AbstractFigure //line
	{
		public override void drawFrame(ref Graphics g)
		{
			Pen p = new Pen(frameColor);
			p.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
			g.DrawLine(p,p1,p2);
			p.Dispose();
		}
		public override void draw(ref Graphics g)
		{
			Pen p = new Pen(primaryColor,lWidth);
			g.DrawLine(p,p1,p2);
			p.Dispose();
		}
	}

	[Serializable()]
	public class GCurve: AbstractFigure //curve line
	{
		List<Point>curve = new List<Point>();
		public override Point firstPoint
		{
			get{ return base.firstPoint; }
			set{
				base.firstPoint = value;
				curve.Add(value);
			}
		}
		public override Point secondPoint
		{
			get{ return base.secondPoint; }
			set{
				base.secondPoint = value;
				curve.Add(value);
			}
		}
		public override void drawFrame(ref Graphics g)
		{
			Pen p = new Pen(frameColor);
			p.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
			g.DrawCurve(p,curve.ToArray<Point>());
			p.Dispose();
		}
		public override void draw(ref Graphics g)
		{
			Pen p = new Pen(primaryColor,lWidth);
			g.DrawCurve(p,curve.ToArray<Point>());
			p.Dispose();
		}
	}
}


















namespace Lab2
{
	public partial class penWidthDialog : Form
	{

		public int Val = 1;

		public penWidthDialog()
		{
			InitializeComponent();
		}

		private void button1_Click(object sender, EventArgs e)
		{
			if(comboBox1.SelectedItem==null)
				Val = 1;
			else
				Val = Int32.Parse((string)comboBox1.SelectedItem);
		}




namespace Lab2
{
	public partial class pictureSizeDialog : Form
	{
		public int newHeight=10,newWidth=10;

		public pictureSizeDialog()
		{
			InitializeComponent();
		}

		private void checkBox1_CheckedChanged(object sender, EventArgs e)
		{
			if(checkBox1.Checked)
			{
				textBox1.Enabled = true;
				textBox2.Enabled = true;
				label1.Enabled = true;
				label2.Enabled = true;
			}else{
				textBox1.Enabled = false;
				textBox2.Enabled = false;
				label1.Enabled = false;
				label2.Enabled = false;
			}
		}

		private void button1_Click(object sender, EventArgs e)
		{
			//set size
			if(checkBox1.Checked)
			{
				try{
					newWidth = Int32.Parse(textBox1.Text);
				}catch(Exception){
					newWidth = 200; //установки по умолчанию
				}
				try{
					newHeight = Int32.Parse(textBox2.Text);
				}catch(Exception){
					newHeight = 200;
				}
			}else{
				if(radioButton1.Checked)
				{
					newWidth = 320;
					newHeight = 240;
				}else if(radioButton2.Checked)
				{
					newWidth = 640;
					newHeight = 480;
				}else{
					newWidth = 800;
					newHeight = 600;
				}
			}
		}

		private void textBox1_TextChanged(object sender, EventArgs e)
		{
			try{
				Int32.Parse(textBox1.Text);
			}catch(Exception){
				MessageBox.Show("Введите число.");
			}
		}

		private void textBox2_TextChanged(object sender, EventArgs e)
		{
			try{
				Int32.Parse(textBox2.Text);
			}catch(Exception){
				MessageBox.Show("Введите число.");
			}
		}

		private void pictureSizeDialog_Load(object sender, EventArgs e)
		{

		}
	}
}
